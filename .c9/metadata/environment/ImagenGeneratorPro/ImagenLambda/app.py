{"filter":false,"title":"app.py","tooltip":"/ImagenGeneratorPro/ImagenLambda/app.py","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":63,"column":0},"action":"remove","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    try:","        # Get the prompt from the event","        body = json.loads(event.get('body', '{}'))","        prompt = body.get('prompt', 'Default prompt')","","        # Retrieve environment variables","        bucket_name = os.getenv('BUCKET_NAME')","        candidate_number = os.getenv('CANDIDATE_NUMBER')","","        if not bucket_name or not candidate_number:","            raise ValueError(\"Missing environment variables BUCKET_NAME or CANDIDATE_NUMBER\")","","        # Set up AWS clients","        bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","        s3_client = boto3.client(\"s3\")","","        # Generate file path","        seed = random.randint(0, 2147483647)","        s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","        # Bedrock model invocation","        native_request = {","            \"taskType\": \"TEXT_IMAGE\",","            \"textToImageParams\": {\"text\": prompt},","            \"imageGenerationConfig\": {","                \"numberOfImages\": 1,","                \"quality\": \"standard\",","                \"cfgScale\": 8.0,","                \"height\": 1024,","                \"width\": 1024,","                \"seed\": seed,","            }","        }","","        response = bedrock_client.invoke_model(","            modelId=\"amazon.titan-image-generator-v1\",","            body=json.dumps(native_request)","        )","        model_response = json.loads(response[\"body\"].read())","","        # Extract and decode the Base64 image data","        base64_image_data = model_response[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","","        # Upload the image to S3","        s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","","        return {","            'statusCode': 200,","            'body': json.dumps({'message': 'Image generated successfully'})","        }","    except Exception as e:","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":59,"column":0},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    try:","        # Get environment variables","        bucket_name = os.environ['BUCKET_NAME']","        candidate_number = os.environ['CANDIDATE_NUMBER']","","        # Get prompt from event","        body = json.loads(event.get('body', '{}'))","        prompt = body.get('prompt', 'Default prompt')","","        # Generate unique image file name","        seed = random.randint(0, 2147483647)","        s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","        # Bedrock request setup","        bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","        native_request = {","            \"taskType\": \"TEXT_IMAGE\",","            \"textToImageParams\": {\"text\": prompt},","            \"imageGenerationConfig\": {","                \"numberOfImages\": 1,","                \"quality\": \"standard\",","                \"cfgScale\": 8.0,","                \"height\": 1024,","                \"width\": 1024,","                \"seed\": seed,","            }","        }","","        response = bedrock_client.invoke_model(","            modelId=\"amazon.titan-image-generator-v1\",","            body=json.dumps(native_request)","        )","","        # Decode image and upload to S3","        base64_image_data = json.loads(response[\"body\"].read())[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","        s3_client = boto3.client('s3')","        s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","","        # Construct the S3 image URL","        image_url = f\"https://{bucket_name}.s3.amazonaws.com/{s3_image_path}\"","","        return {","            'statusCode': 200,","            'body': json.dumps({'message': 'Image generated successfully', 'image_url': image_url})","        }","","    except Exception as e:","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""]}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":35},"action":"remove","lines":["def lambda_handler(event, context):"],"id":3},{"start":{"row":6,"column":0},"end":{"row":13,"column":13},"action":"insert","lines":["def lambda_handler(event, context):","    if event['httpMethod'] == 'GET' and event['path'] == '/':","        with open('index.html', 'r') as file:","            return {","                'statusCode': 200,","                'headers': {'Content-Type': 'text/html'},","                'body': file.read()","            }"]}],[{"start":{"row":0,"column":0},"end":{"row":66,"column":0},"action":"remove","lines":["import base64","import boto3","import json","import random","import os","","def lambda_handler(event, context):","    if event['httpMethod'] == 'GET' and event['path'] == '/':","        with open('index.html', 'r') as file:","            return {","                'statusCode': 200,","                'headers': {'Content-Type': 'text/html'},","                'body': file.read()","            }","    try:","        # Get environment variables","        bucket_name = os.environ['BUCKET_NAME']","        candidate_number = os.environ['CANDIDATE_NUMBER']","","        # Get prompt from event","        body = json.loads(event.get('body', '{}'))","        prompt = body.get('prompt', 'Default prompt')","","        # Generate unique image file name","        seed = random.randint(0, 2147483647)","        s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","        # Bedrock request setup","        bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","        native_request = {","            \"taskType\": \"TEXT_IMAGE\",","            \"textToImageParams\": {\"text\": prompt},","            \"imageGenerationConfig\": {","                \"numberOfImages\": 1,","                \"quality\": \"standard\",","                \"cfgScale\": 8.0,","                \"height\": 1024,","                \"width\": 1024,","                \"seed\": seed,","            }","        }","","        response = bedrock_client.invoke_model(","            modelId=\"amazon.titan-image-generator-v1\",","            body=json.dumps(native_request)","        )","","        # Decode image and upload to S3","        base64_image_data = json.loads(response[\"body\"].read())[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","        s3_client = boto3.client('s3')","        s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","","        # Construct the S3 image URL","        image_url = f\"https://{bucket_name}.s3.amazonaws.com/{s3_image_path}\"","","        return {","            'statusCode': 200,","            'body': json.dumps({'message': 'Image generated successfully', 'image_url': image_url})","        }","","    except Exception as e:","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""],"id":4},{"start":{"row":0,"column":0},"end":{"row":131,"column":0},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","import logging","","# Set up logging","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","def lambda_handler(event, context):","    \"\"\"","    Lambda handler function for serving the HTML page and generating images.","    \"\"\"","    try:","        # Handle GET request to serve the HTML page","        if event.get('httpMethod') == 'GET' and event.get('path') == '/':","            logger.info(\"Serving the index.html file.\")","            try:","                with open('index.html', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'text/html'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"index.html file not found.\")","                return {","                    'statusCode': 404,","                    'body': json.dumps({'message': 'index.html not found'})","                }","","        # Validate HTTP method","        if event.get('httpMethod') != 'POST':","            logger.warning(\"Invalid HTTP method received.\")","            return {","                'statusCode': 405,","                'body': json.dumps({'message': 'Method Not Allowed'})","            }","","        # Load environment variables","        bucket_name = os.environ.get('BUCKET_NAME')","        candidate_number = os.environ.get('CANDIDATE_NUMBER')","        if not bucket_name or not candidate_number:","            logger.error(\"Missing required environment variables.\")","            return {","                'statusCode': 500,","                'body': json.dumps({'message': 'Missing required environment variables'})","            }","","        # Parse and validate input body","        try:","            body = json.loads(event.get('body', '{}'))","            prompt = body.get('prompt', '').strip()","            if not prompt:","                logger.warning(\"Prompt is missing or empty.\")","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'Prompt is required'})","                }","        except json.JSONDecodeError:","            logger.error(\"Failed to parse JSON body.\")","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'Invalid JSON in request body'})","            }","","        # Generate a unique file name for the image","        seed = random.randint(0, 2147483647)","        s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","        # Set up Bedrock client and prepare the request","        bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","        native_request = {","            \"taskType\": \"TEXT_IMAGE\",","            \"textToImageParams\": {\"text\": prompt},","            \"imageGenerationConfig\": {","                \"numberOfImages\": 1,","                \"quality\": \"standard\",","                \"cfgScale\": 8.0,","                \"height\": 1024,","                \"width\": 1024,","                \"seed\": seed,","            }","        }","","        # Invoke the Bedrock model","        try:","            logger.info(\"Invoking the Bedrock model.\")","            response = bedrock_client.invoke_model(","                modelId=\"amazon.titan-image-generator-v1\",","                body=json.dumps(native_request)","            )","            model_response = json.loads(response[\"body\"].read())","        except Exception as bedrock_error:","            logger.error(f\"Bedrock invocation failed: {str(bedrock_error)}\")","            return {","                'statusCode': 500,","                'body': json.dumps({'message': 'Failed to generate image', 'error': str(bedrock_error)})","            }","","        # Decode and upload the image to S3","        try:","            logger.info(\"Decoding and uploading image to S3.\")","            base64_image_data = model_response[\"images\"][0]","            image_data = base64.b64decode(base64_image_data)","            s3_client = boto3.client('s3')","            s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","        except Exception as s3_error:","            logger.error(f\"Failed to upload image to S3: {str(s3_error)}\")","            return {","                'statusCode': 500,","                'body': json.dumps({'message': 'Failed to upload image to S3', 'error': str(s3_error)})","            }","","        # Construct the S3 image URL","        image_url = f\"https://{bucket_name}.s3.amazonaws.com/{s3_image_path}\"","        logger.info(f\"Image successfully generated and uploaded: {image_url}\")","","        return {","            'statusCode': 200,","            'body': json.dumps({'message': 'Image generated successfully', 'image_url': image_url})","        }","","    except Exception as e:","        logger.error(f\"Unhandled exception: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""]}],[{"start":{"row":0,"column":0},"end":{"row":131,"column":0},"action":"remove","lines":["import base64","import boto3","import json","import random","import os","import logging","","# Set up logging","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","def lambda_handler(event, context):","    \"\"\"","    Lambda handler function for serving the HTML page and generating images.","    \"\"\"","    try:","        # Handle GET request to serve the HTML page","        if event.get('httpMethod') == 'GET' and event.get('path') == '/':","            logger.info(\"Serving the index.html file.\")","            try:","                with open('index.html', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'text/html'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"index.html file not found.\")","                return {","                    'statusCode': 404,","                    'body': json.dumps({'message': 'index.html not found'})","                }","","        # Validate HTTP method","        if event.get('httpMethod') != 'POST':","            logger.warning(\"Invalid HTTP method received.\")","            return {","                'statusCode': 405,","                'body': json.dumps({'message': 'Method Not Allowed'})","            }","","        # Load environment variables","        bucket_name = os.environ.get('BUCKET_NAME')","        candidate_number = os.environ.get('CANDIDATE_NUMBER')","        if not bucket_name or not candidate_number:","            logger.error(\"Missing required environment variables.\")","            return {","                'statusCode': 500,","                'body': json.dumps({'message': 'Missing required environment variables'})","            }","","        # Parse and validate input body","        try:","            body = json.loads(event.get('body', '{}'))","            prompt = body.get('prompt', '').strip()","            if not prompt:","                logger.warning(\"Prompt is missing or empty.\")","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'Prompt is required'})","                }","        except json.JSONDecodeError:","            logger.error(\"Failed to parse JSON body.\")","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'Invalid JSON in request body'})","            }","","        # Generate a unique file name for the image","        seed = random.randint(0, 2147483647)","        s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","        # Set up Bedrock client and prepare the request","        bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","        native_request = {","            \"taskType\": \"TEXT_IMAGE\",","            \"textToImageParams\": {\"text\": prompt},","            \"imageGenerationConfig\": {","                \"numberOfImages\": 1,","                \"quality\": \"standard\",","                \"cfgScale\": 8.0,","                \"height\": 1024,","                \"width\": 1024,","                \"seed\": seed,","            }","        }","","        # Invoke the Bedrock model","        try:","            logger.info(\"Invoking the Bedrock model.\")","            response = bedrock_client.invoke_model(","                modelId=\"amazon.titan-image-generator-v1\",","                body=json.dumps(native_request)","            )","            model_response = json.loads(response[\"body\"].read())","        except Exception as bedrock_error:","            logger.error(f\"Bedrock invocation failed: {str(bedrock_error)}\")","            return {","                'statusCode': 500,","                'body': json.dumps({'message': 'Failed to generate image', 'error': str(bedrock_error)})","            }","","        # Decode and upload the image to S3","        try:","            logger.info(\"Decoding and uploading image to S3.\")","            base64_image_data = model_response[\"images\"][0]","            image_data = base64.b64decode(base64_image_data)","            s3_client = boto3.client('s3')","            s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","        except Exception as s3_error:","            logger.error(f\"Failed to upload image to S3: {str(s3_error)}\")","            return {","                'statusCode': 500,","                'body': json.dumps({'message': 'Failed to upload image to S3', 'error': str(s3_error)})","            }","","        # Construct the S3 image URL","        image_url = f\"https://{bucket_name}.s3.amazonaws.com/{s3_image_path}\"","        logger.info(f\"Image successfully generated and uploaded: {image_url}\")","","        return {","            'statusCode': 200,","            'body': json.dumps({'message': 'Image generated successfully', 'image_url': image_url})","        }","","    except Exception as e:","        logger.error(f\"Unhandled exception: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""],"id":5},{"start":{"row":0,"column":0},"end":{"row":154,"column":0},"action":"insert","lines":["import os","import json","import boto3","import base64","import random","import logging","","# Set up logging","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","def lambda_handler(event, context):","    try:","        path = event.get('path', '')","","        # Serve the HTML page","        if event.get('httpMethod') == 'GET' and path == '/':","            logger.info(\"Serving the index.html file.\")","            try:","                with open('index.html', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'text/html'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"index.html not found.\")","                return {'statusCode': 404, 'body': 'index.html not found'}","","        # Serve the CSS file","        if event.get('httpMethod') == 'GET' and path == '/styles.css':","            logger.info(\"Serving the styles.css file.\")","            try:","                with open('styles.css', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'text/css'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"styles.css not found.\")","                return {'statusCode': 404, 'body': 'styles.css not found'}","","        # Serve the JavaScript file","        if event.get('httpMethod') == 'GET' and path == '/script.js':","            logger.info(\"Serving the script.js file.\")","            try:","                with open('script.js', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'application/javascript'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"script.js not found.\")","                return {'statusCode': 404, 'body': 'script.js not found'}","","        # Handle POST requests to generate the image","        if event.get('httpMethod') == 'POST' and path == '/generate':","            logger.info(\"Generating image based on the prompt.\")","            ","            # Load environment variables","            bucket_name = os.environ.get('BUCKET_NAME')","            candidate_number = os.environ.get('CANDIDATE_NUMBER')","","            if not bucket_name or not candidate_number:","                logger.error(\"Missing required environment variables.\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Missing required environment variables'})","                }","","            # Parse and validate the input","            try:","                body = json.loads(event.get('body', '{}'))","                prompt = body.get('prompt', '').strip()","                if not prompt:","                    logger.warning(\"Prompt is missing or empty.\")","                    return {","                        'statusCode': 400,","                        'body': json.dumps({'message': 'Prompt is required'})","                    }","            except json.JSONDecodeError:","                logger.error(\"Invalid JSON body.\")","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'Invalid JSON in request body'})","                }","","            # Generate a unique file name for the image","            seed = random.randint(0, 2147483647)","            s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","            # Set up Bedrock client and request","            bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","            native_request = {","                \"taskType\": \"TEXT_IMAGE\",","                \"textToImageParams\": {\"text\": prompt},","                \"imageGenerationConfig\": {","                    \"numberOfImages\": 1,","                    \"quality\": \"standard\",","                    \"cfgScale\": 8.0,","                    \"height\": 1024,","                    \"width\": 1024,","                    \"seed\": seed,","                }","            }","","            # Invoke the Bedrock model","            try:","                response = bedrock_client.invoke_model(","                    modelId=\"amazon.titan-image-generator-v1\",","                    body=json.dumps(native_request)","                )","                model_response = json.loads(response[\"body\"].read())","            except Exception as e:","                logger.error(f\"Bedrock invocation failed: {str(e)}\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Failed to generate image', 'error': str(e)})","                }","","            # Decode and upload the image to S3","            try:","                base64_image_data = model_response[\"images\"][0]","                image_data = base64.b64decode(base64_image_data)","                s3_client = boto3.client('s3')","                s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","            except Exception as e:","                logger.error(f\"Failed to upload image to S3: {str(e)}\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Failed to upload image to S3', 'error': str(e)})","                }","","            # Construct the S3 image URL","            image_url = f\"https://{bucket_name}.s3.amazonaws.com/{s3_image_path}\"","            logger.info(f\"Image successfully generated and uploaded: {image_url}\")","","            return {","                'statusCode': 200,","                'body': json.dumps({'message': 'Image generated successfully', 'image_url': image_url})","            }","","        # Return 404 for other paths","        logger.warning(f\"Path not found: {path}\")","        return {'statusCode': 404, 'body': 'Path not found'}","","    except Exception as e:","        logger.error(f\"Unhandled exception: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""]}],[{"start":{"row":0,"column":0},"end":{"row":154,"column":0},"action":"remove","lines":["import os","import json","import boto3","import base64","import random","import logging","","# Set up logging","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","def lambda_handler(event, context):","    try:","        path = event.get('path', '')","","        # Serve the HTML page","        if event.get('httpMethod') == 'GET' and path == '/':","            logger.info(\"Serving the index.html file.\")","            try:","                with open('index.html', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'text/html'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"index.html not found.\")","                return {'statusCode': 404, 'body': 'index.html not found'}","","        # Serve the CSS file","        if event.get('httpMethod') == 'GET' and path == '/styles.css':","            logger.info(\"Serving the styles.css file.\")","            try:","                with open('styles.css', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'text/css'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"styles.css not found.\")","                return {'statusCode': 404, 'body': 'styles.css not found'}","","        # Serve the JavaScript file","        if event.get('httpMethod') == 'GET' and path == '/script.js':","            logger.info(\"Serving the script.js file.\")","            try:","                with open('script.js', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'application/javascript'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"script.js not found.\")","                return {'statusCode': 404, 'body': 'script.js not found'}","","        # Handle POST requests to generate the image","        if event.get('httpMethod') == 'POST' and path == '/generate':","            logger.info(\"Generating image based on the prompt.\")","            ","            # Load environment variables","            bucket_name = os.environ.get('BUCKET_NAME')","            candidate_number = os.environ.get('CANDIDATE_NUMBER')","","            if not bucket_name or not candidate_number:","                logger.error(\"Missing required environment variables.\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Missing required environment variables'})","                }","","            # Parse and validate the input","            try:","                body = json.loads(event.get('body', '{}'))","                prompt = body.get('prompt', '').strip()","                if not prompt:","                    logger.warning(\"Prompt is missing or empty.\")","                    return {","                        'statusCode': 400,","                        'body': json.dumps({'message': 'Prompt is required'})","                    }","            except json.JSONDecodeError:","                logger.error(\"Invalid JSON body.\")","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'Invalid JSON in request body'})","                }","","            # Generate a unique file name for the image","            seed = random.randint(0, 2147483647)","            s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","            # Set up Bedrock client and request","            bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","            native_request = {","                \"taskType\": \"TEXT_IMAGE\",","                \"textToImageParams\": {\"text\": prompt},","                \"imageGenerationConfig\": {","                    \"numberOfImages\": 1,","                    \"quality\": \"standard\",","                    \"cfgScale\": 8.0,","                    \"height\": 1024,","                    \"width\": 1024,","                    \"seed\": seed,","                }","            }","","            # Invoke the Bedrock model","            try:","                response = bedrock_client.invoke_model(","                    modelId=\"amazon.titan-image-generator-v1\",","                    body=json.dumps(native_request)","                )","                model_response = json.loads(response[\"body\"].read())","            except Exception as e:","                logger.error(f\"Bedrock invocation failed: {str(e)}\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Failed to generate image', 'error': str(e)})","                }","","            # Decode and upload the image to S3","            try:","                base64_image_data = model_response[\"images\"][0]","                image_data = base64.b64decode(base64_image_data)","                s3_client = boto3.client('s3')","                s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","            except Exception as e:","                logger.error(f\"Failed to upload image to S3: {str(e)}\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Failed to upload image to S3', 'error': str(e)})","                }","","            # Construct the S3 image URL","            image_url = f\"https://{bucket_name}.s3.amazonaws.com/{s3_image_path}\"","            logger.info(f\"Image successfully generated and uploaded: {image_url}\")","","            return {","                'statusCode': 200,","                'body': json.dumps({'message': 'Image generated successfully', 'image_url': image_url})","            }","","        # Return 404 for other paths","        logger.warning(f\"Path not found: {path}\")","        return {'statusCode': 404, 'body': 'Path not found'}","","    except Exception as e:","        logger.error(f\"Unhandled exception: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""],"id":7},{"start":{"row":0,"column":0},"end":{"row":130,"column":0},"action":"insert","lines":["import os","import json","import boto3","import base64","import random","import logging","","# Set up logging","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","","def lambda_handler(event, context):","    \"\"\"","    Lambda handler for serving the HTML page and generating images.","    \"\"\"","    try:","        path = event.get('path', '')","","        # Serve the HTML page","        if event.get('httpMethod') == 'GET' and path == '/':","            logger.info(\"Serving the index.html file.\")","            try:","                with open('index.html', 'r') as file:","                    return {","                        'statusCode': 200,","                        'headers': {'Content-Type': 'text/html'},","                        'body': file.read()","                    }","            except FileNotFoundError:","                logger.error(\"index.html not found.\")","                return {'statusCode': 404, 'body': 'index.html not found'}","","        # Handle POST requests to generate the image","        if event.get('httpMethod') == 'POST' and path == '/generate':","            logger.info(\"Generating image based on the prompt.\")","","            # Load environment variables","            bucket_name = os.environ.get('BUCKET_NAME')","            candidate_number = os.environ.get('CANDIDATE_NUMBER')","","            if not bucket_name or not candidate_number:","                logger.error(\"Missing required environment variables.\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Missing required environment variables'})","                }","","            # Parse and validate the input","            try:","                body = json.loads(event.get('body', '{}'))","                prompt = body.get('prompt', '').strip()","                if not prompt:","                    logger.warning(\"Prompt is missing or empty.\")","                    return {","                        'statusCode': 400,","                        'body': json.dumps({'message': 'Prompt is required'})","                    }","            except json.JSONDecodeError:","                logger.error(\"Invalid JSON body.\")","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'Invalid JSON in request body'})","                }","","            # Generate a unique file name for the image","            seed = random.randint(0, 2147483647)","            s3_image_path = f\"{candidate_number}/titan_{seed}.png\"","","            # Set up Bedrock client and request","            bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","            native_request = {","                \"taskType\": \"TEXT_IMAGE\",","                \"textToImageParams\": {\"text\": prompt},","                \"imageGenerationConfig\": {","                    \"numberOfImages\": 1,","                    \"quality\": \"standard\",","                    \"cfgScale\": 8.0,","                    \"height\": 1024,","                    \"width\": 1024,","                    \"seed\": seed,","                }","            }","","            # Invoke the Bedrock model","            try:","                response = bedrock_client.invoke_model(","                    modelId=\"amazon.titan-image-generator-v1\",","                    body=json.dumps(native_request)","                )","                model_response = json.loads(response[\"body\"].read())","            except Exception as e:","                logger.error(f\"Bedrock invocation failed: {str(e)}\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Failed to generate image', 'error': str(e)})","                }","","            # Decode and upload the image to S3","            try:","                base64_image_data = model_response[\"images\"][0]","                image_data = base64.b64decode(base64_image_data)","                s3_client = boto3.client('s3')","                s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","            except Exception as e:","                logger.error(f\"Failed to upload image to S3: {str(e)}\")","                return {","                    'statusCode': 500,","                    'body': json.dumps({'message': 'Failed to upload image to S3', 'error': str(e)})","                }","","            # Construct the S3 image URL","            image_url = f\"https://{bucket_name}.s3.amazonaws.com/{s3_image_path}\"","            logger.info(f\"Image successfully generated and uploaded: {image_url}\")","","            return {","                'statusCode': 200,","                'body': json.dumps({'message': 'Image generated successfully', 'image_url': image_url})","            }","","        # Return 404 for other paths","        logger.warning(f\"Path not found: {path}\")","        return {'statusCode': 404, 'body': 'Path not found'}","","    except Exception as e:","        logger.error(f\"Unhandled exception: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Internal server error', 'error': str(e)})","        }",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":130,"column":0},"end":{"row":130,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1731904384021,"hash":"b0e385b07ccaa83b5fee87989ee4896e95958b36"}